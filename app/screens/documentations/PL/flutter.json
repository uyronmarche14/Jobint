{
  "languages": {
    "Flutter": {
      "topics": [
        {
          "title": "Introduction to Flutter",
          "level": "Beginner",
          "type": "Basics",
          "description": "Flutter is an open-source UI software development kit created by Google. It allows developers to build natively compiled applications for mobile, web, and desktop from a single codebase.",
          "example": "// Your first Flutter app\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello, Flutter!')),\n        body: Center(child: Text('Welcome to Flutter')),\n      ),\n    );\n  }\n}"
        },
        {
          "title": "Widgets",
          "level": "Beginner",
          "type": "Basics",
          "description": "In Flutter, everything is a widget. Widgets are the basic building blocks of a Flutter app's user interface. They describe what their view should look like given their current configuration and state.",
          "example": "// Basic widget example\nimport 'package:flutter/material.dart';\n\nclass MyButton extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: () {},\n      child: Text('Click Me'),\n    );\n  }\n}"
        },
        {
          "title": "Stateless vs Stateful Widgets",
          "level": "Beginner",
          "type": "Basics",
          "description": "Stateless widgets are immutable and cannot change their state over time. Stateful widgets maintain state that might change during the widget's lifetime.",
          "example": "// StatelessWidget example\nclass MyStatelessWidget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Text('I am stateless');\n  }\n}\n\n// StatefulWidget example\nclass MyStatefulWidget extends StatefulWidget {\n  @override\n  _MyStatefulWidgetState createState() => _MyStatefulWidgetState();\n}\n\nclass _MyStatefulWidgetState extends State<MyStatefulWidget> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    setState(() {\n      _counter++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        Text('Counter: $_counter'),\n        ElevatedButton(\n          onPressed: _incrementCounter,\n          child: Text('Increment'),\n        ),\n      ],\n    );\n  }\n}"
        },
        {
          "title": "Layouts in Flutter",
          "level": "Beginner",
          "type": "Layout",
          "description": "Flutter uses widgets to build its UI. Layout widgets are used to arrange other widgets in rows, columns, grids, and more.",
          "example": "// Row and Column layout\nColumn(\n  children: [\n    Text('Item 1'),\n    Text('Item 2'),\n    Row(\n      children: [\n        Icon(Icons.star),\n        Icon(Icons.star_border),\n      ],\n    ),\n  ],\n)"
        },
        {
          "title": "Containers and Padding",
          "level": "Beginner",
          "type": "Layout",
          "description": "The `Container` widget is used to contain a child widget with the ability to apply padding, margins, borders, and backgrounds.",
          "example": "// Container with padding\nContainer(\n  padding: EdgeInsets.all(16.0),\n  margin: EdgeInsets.symmetric(horizontal: 8.0),\n  decoration: BoxDecoration(\n    color: Colors.blueAccent,\n    borderRadius: BorderRadius.circular(8.0),\n  ),\n  child: Text('Hello, Container!'),\n)"
        },
        {
          "title": "Images and Assets",
          "level": "Beginner",
          "type": "Media",
          "description": "Flutter can display images from assets, files, and the network. Asset images need to be declared in the `pubspec.yaml` file.",
          "example": "// Displaying an image from assets\nImage.asset('assets/images/my_image.png')\n\n// pubspec.yaml\nflutter:\n  assets:\n    - assets/images/my_image.png"
        },
        {
          "title": "Navigating Between Screens",
          "level": "Beginner",
          "type": "Navigation",
          "description": "Flutter provides a navigation system and routes to move between different screens or pages in your app.",
          "example": "// Navigation example\n// First Screen\nElevatedButton(\n  onPressed: () {\n    Navigator.push(\n      context,\n      MaterialPageRoute(builder: (context) => SecondScreen()),\n    );\n  },\n  child: Text('Go to Second Screen'),\n)\n\n// Second Screen\nclass SecondScreen extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Second Screen')),\n      body: Center(child: Text('Welcome to the second screen!')),\n    );\n  }\n}"
        },
        {
          "title": "ListView and GridView",
          "level": "Beginner",
          "type": "Layout",
          "description": "`ListView` and `GridView` are scrollable widgets used to display lists and grids of content.",
          "example": "// ListView example\nListView(\n  children: [\n    ListTile(\n      leading: Icon(Icons.map),\n      title: Text('Map'),\n    ),\n    ListTile(\n      leading: Icon(Icons.photo),\n      title: Text('Album'),\n    ),\n    ListTile(\n      leading: Icon(Icons.phone),\n      title: Text('Phone'),\n    ),\n  ],\n)\n\n// GridView example\nGridView.count(\n  crossAxisCount: 2,\n  children: [\n    Container(color: Colors.red),\n    Container(color: Colors.blue),\n    Container(color: Colors.green),\n    Container(color: Colors.yellow),\n  ],\n)"
        },
        {
          "title": "Handling User Input",
          "level": "Beginner",
          "type": "Forms",
          "description": "Flutter provides widgets like `TextField` and `Form` to handle user input and form submissions.",
          "example": "// TextField example\nTextField(\n  decoration: InputDecoration(\n    labelText: 'Enter your name',\n  ),\n)"
        },
        {
          "title": "Gesture Detection",
          "level": "Intermediate",
          "type": "Interaction",
          "description": "Flutter has a rich set of gesture detectors for handling touch interactions like taps, swipes, and pinches.",
          "example": "// GestureDetector example\nGestureDetector(\n  onTap: () {\n    print('Container tapped');\n  },\n  child: Container(\n    color: Colors.lightBlue,\n    width: 100.0,\n    height: 100.0,\n  ),\n)"
        },
        {
          "title": "State Management with setState",
          "level": "Beginner",
          "type": "State Management",
          "description": "The simplest way to manage state in Flutter is using the `setState` method in a `StatefulWidget`.",
          "example": "// Counter example\nclass CounterWidget extends StatefulWidget {\n  @override\n  _CounterWidgetState createState() => _CounterWidgetState();\n}\n\nclass _CounterWidgetState extends State<CounterWidget> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    setState(() {\n      _counter++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: <Widget>[\n        Text('$_counter'),\n        ElevatedButton(\n          onPressed: _incrementCounter,\n          child: Text('Increment'),\n        ),\n      ],\n    );\n  }\n}"
        },
        {
          "title": "State Management with Provider",
          "level": "Intermediate",
          "type": "State Management",
          "description": "Provider is a popular package for state management, making it easier to share data between widgets.",
          "example": "// Using Provider\n// pubspec.yaml\ndependencies:\n  provider: ^6.0.0\n\n// main.dart\nimport 'package:provider/provider.dart';\n\nvoid main() {\n  runApp(\n    ChangeNotifierProvider(\n      create: (context) => Counter(),\n      child: MyApp(),\n    ),\n  );\n}\n\nclass Counter with ChangeNotifier {\n  int _count = 0;\n\n  int get count => _count;\n\n  void increment() {\n    _count++;\n    notifyListeners();\n  }\n}\n\n// Accessing in widget\nclass CounterText extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Text('${Provider.of<Counter>(context).count}');\n  }\n}"
        },
        {
          "title": "Asynchronous Programming with Future and Async/Await",
          "level": "Intermediate",
          "type": "Concurrency",
          "description": "Flutter uses Dart's async programming features to perform tasks like fetching data from the network without blocking the UI.",
          "example": "// Async/Await example\nFuture<String> fetchData() async {\n  await Future.delayed(Duration(seconds: 2));\n  return 'Data loaded';\n}\n\nvoid loadData() async {\n  String data = await fetchData();\n  print(data);\n}"
        },
        {
          "title": "HTTP Requests",
          "level": "Intermediate",
          "type": "Networking",
          "description": "Flutter uses the `http` package to perform HTTP requests to communicate with RESTful services.",
          "example": "// HTTP GET request\nimport 'package:http/http.dart' as http;\n\nvoid fetchPost() async {\n  final response = await http.get(Uri.parse('https://jsonplaceholder.typicode.com/posts/1'));\n  if (response.statusCode == 200) {\n    print('Response data: ${response.body}');\n  } else {\n    print('Failed to load post');\n  }\n}"
        },
        {
          "title": "JSON Serialization",
          "level": "Intermediate",
          "type": "Data Handling",
          "description": "Handling JSON data in Flutter involves parsing JSON strings into Dart objects and vice versa.",
          "example": "// JSON parsing example\nimport 'dart:convert';\n\nvoid parseJson() {\n  String jsonString = '{\"name\": \"Alice\", \"age\": 30}';\n  Map<String, dynamic> user = jsonDecode(jsonString);\n  print('Name: ${user['name']}');\n}"
        },
        {
          "title": "Animations",
          "level": "Advanced",
          "type": "Animations",
          "description": "Flutter provides a powerful animation framework, allowing for complex and custom animations.",
          "example": "// Basic animation example\nclass AnimatedLogo extends StatefulWidget {\n  @override\n  _AnimatedLogoState createState() => _AnimatedLogoState();\n}\n\nclass _AnimatedLogoState extends State<AnimatedLogo> with SingleTickerProviderStateMixin {\n  AnimationController _controller;\n  Animation<double> _animation;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(\n      duration: const Duration(seconds: 2),\n      vsync: this,\n    );\n    _animation = Tween<double>(begin: 0, end: 300).animate(_controller)\n      ..addListener(() {\n        setState(() {});\n      });\n    _controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      width: _animation.value,\n      height: _animation.value,\n      child: FlutterLogo(),\n    );\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}"
        },
        {
          "title": "Custom Widgets",
          "level": "Intermediate",
          "type": "Basics",
          "description": "Creating custom widgets allows you to encapsulate and reuse your UI components.",
          "example": "// Custom widget example\nclass MyCustomButton extends StatelessWidget {\n  final String label;\n  final VoidCallback onPressed;\n\n  MyCustomButton({required this.label, required this.onPressed});\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: onPressed,\n      child: Text(label),\n    );\n  }\n}"
        },
        {
          "title": "Working with Forms",
          "level": "Intermediate",
          "type": "Forms",
          "description": "Flutter provides form widgets and validation mechanisms to handle user input in forms.",
          "example": "// Form with validation\nfinal _formKey = GlobalKey<FormState>();\n\nForm(\n  key: _formKey,\n  child: Column(\n    children: <Widget>[\n      TextFormField(\n        validator: (value) {\n          if (value == null || value.isEmpty) {\n            return 'Please enter some text';\n          }\n          return null;\n        },\n      ),\n      ElevatedButton(\n        onPressed: () {\n          if (_formKey.currentState!.validate()) {\n            // Process data\n          }\n        },\n        child: Text('Submit'),\n      ),\n    ],\n  ),\n)"
        },
        {
          "title": "Firebase Integration",
          "level": "Advanced",
          "type": "Backend Integration",
          "description": "Flutter apps can integrate with Firebase services for authentication, database, storage, and more.",
          "example": "// Firebase authentication example\n// pubspec.yaml\ndependencies:\n  firebase_auth: ^3.0.0\n\n// main.dart\nimport 'package:firebase_core/firebase_core.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await Firebase.initializeApp();\n  runApp(MyApp());\n}\n\nvoid signInAnonymously() async {\n  UserCredential userCredential = await FirebaseAuth.instance.signInAnonymously();\n  print('Signed in as ${userCredential.user?.uid}');\n}"
        },
        {
          "title": "Localization and Internationalization",
          "level": "Advanced",
          "type": "Internationalization",
          "description": "Flutter provides tools for localizing your app, allowing you to support multiple languages and regions.",
          "example": "// Adding localization\n// pubspec.yaml\ndependencies:\n  flutter_localizations:\n    sdk: flutter\n\n// main.dart\nimport 'package:flutter_localizations/flutter_localizations.dart';\n\nMaterialApp(\n  localizationsDelegates: [\n    GlobalMaterialLocalizations.delegate,\n    GlobalWidgetsLocalizations.delegate,\n    GlobalCupertinoLocalizations.delegate,\n  ],\n  supportedLocales: [\n    const Locale('en', ''), // English\n    const Locale('es', ''), // Spanish\n  ],\n  // ...\n)"
        },
        {
          "title": "Working with SQLite",
          "level": "Advanced",
          "type": "Data Persistence",
          "description": "For local data storage, Flutter can use SQLite databases via packages like `sqflite`.",
          "example": "// Using sqflite package\n// pubspec.yaml\ndependencies:\n  sqflite: ^2.0.0\n  path_provider: ^2.0.0\n\n// main.dart\nimport 'package:sqflite/sqflite.dart';\nimport 'package:path/path.dart';\n\nvoid openDatabase() async {\n  final database = openDatabase(\n    join(await getDatabasesPath(), 'my_database.db'),\n    onCreate: (db, version) {\n      return db.execute(\n        'CREATE TABLE users(id INTEGER PRIMARY KEY, name TEXT)',\n      );\n    },\n    version: 1,\n  );\n}"
        },
        {
          "title": "Platform Channels",
          "level": "Advanced",
          "type": "Platform Integration",
          "description": "Platform channels allow you to communicate between Flutter and the host platform's native code (Java/Kotlin for Android, Objective-C/Swift for iOS).",
          "example": "// Platform channel example\n// Flutter side\nimport 'package:flutter/services.dart';\n\nstatic const platform = MethodChannel('com.example.app/channel');\n\nFuture<void> getBatteryLevel() async {\n  try {\n    final int result = await platform.invokeMethod('getBatteryLevel');\n    print('Battery level: $result%');\n  } on PlatformException catch (e) {\n    print('Failed to get battery level: ${e.message}');\n  }\n}\n\n// Android native side (Kotlin)\nclass MainActivity: FlutterActivity() {\n  private val CHANNEL = \"com.example.app/channel\"\n\n  override fun configureFlutterEngine(@NonNull flutterEngine: FlutterEngine) {\n    super.configureFlutterEngine(flutterEngine)\n    MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL).setMethodCallHandler {\n      call, result ->\n      if (call.method == \"getBatteryLevel\") {\n        val batteryLevel = getBatteryLevel()\n        if (batteryLevel != -1) {\n          result.success(batteryLevel)\n        } else {\n          result.error(\"UNAVAILABLE\", \"Battery level not available.\", null)\n        }\n      } else {\n        result.notImplemented()\n      }\n    }\n  }\n\n  private fun getBatteryLevel(): Int {\n    val batteryLevel: Int\n    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {\n      val batteryManager = getSystemService(BATTERY_SERVICE) as BatteryManager\n      batteryLevel = batteryManager.getIntProperty(BatteryManager.BATTERY_PROPERTY_CAPACITY)\n    } else {\n      val intent = ContextWrapper(applicationContext).registerReceiver(null, IntentFilter(Intent.ACTION_BATTERY_CHANGED))\n      batteryLevel = intent!!.getIntExtra(BatteryManager.EXTRA_LEVEL, -1) * 100 / intent.getIntExtra(BatteryManager.EXTRA_SCALE, -1)\n    }\n    return batteryLevel\n  }\n}"
        },
        {
          "title": "Publishing to App Stores",
          "level": "Advanced",
          "type": "Deployment",
          "description": "Flutter apps can be built and published to the Google Play Store and Apple App Store.",
          "example": "// Building an APK for Android\n// Run in terminal:\nflutter build apk --release\n\n// Building an app bundle for Google Play\nflutter build appbundle --release\n\n// Building for iOS\nflutter build ios --release\n\n// Follow platform-specific guidelines for signing and publishing."
        },
        {
          "title": "Testing in Flutter",
          "level": "Intermediate",
          "type": "Testing",
          "description": "Flutter supports unit, widget, and integration testing to ensure your app works as expected.",
          "example": "// Widget test example\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:my_app/main.dart';\n\nvoid main() {\n  testWidgets('Counter increments smoke test', (WidgetTester tester) async {\n    await tester.pumpWidget(MyApp());\n\n    expect(find.text('0'), findsOneWidget);\n    expect(find.text('1'), findsNothing);\n\n    await tester.tap(find.byIcon(Icons.add));\n    await tester.pump();\n\n    expect(find.text('0'), findsNothing);\n    expect(find.text('1'), findsOneWidget);\n  });\n}"
        },
        {
          "title": "Using InheritedWidget",
          "level": "Advanced",
          "type": "State Management",
          "description": "`InheritedWidget` is a base class for widgets that efficiently propagate information down the widget tree.",
          "example": "// InheritedWidget example\nclass MyInheritedWidget extends InheritedWidget {\n  final int data;\n\n  MyInheritedWidget({required this.data, required Widget child}) : super(child: child);\n\n  @override\n  bool updateShouldNotify(MyInheritedWidget oldWidget) => data != oldWidget.data;\n\n  static MyInheritedWidget? of(BuildContext context) {\n    return context.dependOnInheritedWidgetOfExactType<MyInheritedWidget>();\n  }\n}\n\n// Accessing the inherited data\nint data = MyInheritedWidget.of(context)?.data ?? 0;"
        },
        {
          "title": "Custom Animations with Tween and AnimationController",
          "level": "Advanced",
          "type": "Animations",
          "description": "Creating custom animations using `Tween`, `AnimationController`, and `AnimatedBuilder` for fine-grained control.",
          "example": "// Custom animation example\nclass MyAnimation extends StatefulWidget {\n  @override\n  _MyAnimationState createState() => _MyAnimationState();\n}\n\nclass _MyAnimationState extends State<MyAnimation> with SingleTickerProviderStateMixin {\n  late AnimationController _controller;\n  late Animation<double> _animation;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(\n      duration: const Duration(seconds: 2),\n      vsync: this,\n    );\n    _animation = CurvedAnimation(parent: _controller, curve: Curves.easeIn);\n    _controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: _animation,\n      builder: (context, child) {\n        return Opacity(\n          opacity: _animation.value,\n          child: child,\n        );\n      },\n      child: Text('Fading In'),\n    );\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}"
        },
        {
          "title": "Responsive Design",
          "level": "Intermediate",
          "type": "Responsive Design",
          "description": "Building apps that adapt to different screen sizes and orientations using `MediaQuery` and responsive layouts.",
          "example": "// Responsive layout example\nWidget build(BuildContext context) {\n  var screenSize = MediaQuery.of(context).size;\n  if (screenSize.width > 600) {\n    // Tablet or desktop layout\n    return TabletLayout();\n  } else {\n    // Mobile layout\n    return MobileLayout();\n  }\n}"
        },
        {
          "title": "Drawing and Painting with CustomPainter",
          "level": "Advanced",
          "type": "Graphics",
          "description": "Creating custom drawings and graphics by extending `CustomPainter`.",
          "example": "// CustomPainter example\nclass MyPainter extends CustomPainter {\n  @override\n  void paint(Canvas canvas, Size size) {\n    var paint = Paint()\n      ..color = Colors.blue\n      ..strokeWidth = 4.0;\n    canvas.drawLine(Offset(0, 0), Offset(size.width, size.height), paint);\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}\n\n// Using the painter\nCustomPaint(\n  size: Size(200, 200),\n  painter: MyPainter(),\n)"
        },
        {
          "title": "Accessibility in Flutter",
          "level": "Intermediate",
          "type": "Best Practices",
          "description": "Ensuring your app is accessible to all users by following Flutter's accessibility guidelines.",
          "example": "// Accessibility example\nSemantics(\n  label: 'Submit button',\n  child: ElevatedButton(\n    onPressed: () {},\n    child: Text('Submit'),\n  ),\n)"
        },
        {
          "title": "App Theming and Styling",
          "level": "Intermediate",
          "type": "Styling",
          "description": "Customizing the look and feel of your app using themes and styles.",
          "example": "// Defining a theme\nMaterialApp(\n  theme: ThemeData(\n    primarySwatch: Colors.blue,\n    textTheme: TextTheme(\n      bodyText2: TextStyle(color: Colors.red),\n    ),\n  ),\n  home: MyHomePage(),\n)"
        },
        {
          "title": "Handling Permissions",
          "level": "Advanced",
          "type": "Permissions",
          "description": "Managing permissions like camera, location, etc., using packages like `permission_handler`.",
          "example": "// Using permission_handler\n// pubspec.yaml\ndependencies:\n  permission_handler: ^8.0.0\n\n// main.dart\nimport 'package:permission_handler/permission_handler.dart';\n\nvoid checkCameraPermission() async {\n  var status = await Permission.camera.status;\n  if (!status.isGranted) {\n    if (await Permission.camera.request().isGranted) {\n      // Permission granted\n    }\n  }\n}"
        },
        {
          "title": "Implementing Dark Mode",
          "level": "Intermediate",
          "type": "Styling",
          "description": "Supporting light and dark themes in your app to enhance user experience.",
          "example": "// Dark mode example\nMaterialApp(\n  theme: ThemeData.light(),\n  darkTheme: ThemeData.dark(),\n  themeMode: ThemeMode.system,\n  home: MyHomePage(),\n)"
        },
        {
          "title": "Integrating Native Code",
          "level": "Advanced",
          "type": "Platform Integration",
          "description": "Including platform-specific code using platform channels or writing plugins.",
          "example": "// Creating a plugin\n// 1. Create a new plugin project:\n// flutter create --template=plugin --platforms=android,ios my_plugin\n\n// 2. Implement platform-specific code in respective folders.\n\n// 3. Use the plugin in your app by adding it as a dependency."
        },
        {
          "title": "Effective Debugging",
          "level": "Intermediate",
          "type": "Best Practices",
          "description": "Using Flutter's debugging tools like Dart DevTools, logging, and breakpoints to troubleshoot your app.",
          "example": "// Using debugPrint\nvoid myFunction() {\n  debugPrint('This is a debug message');\n}\n\n// Using Flutter Inspector\n// Run the app in debug mode and open DevTools to inspect the widget tree."
        },
        {
          "title": "Optimizing Performance",
          "level": "Advanced",
          "type": "Performance",
          "description": "Improving app performance by avoiding unnecessary rebuilds, using efficient data structures, and profiling.",
          "example": "// Using const constructors\nconst Text('This is a constant text');\n\n// Avoiding large widget trees in build methods\nWidget build(BuildContext context) {\n  return CachedWidget();\n}\n\n// Profiling the app\n// Run in terminal:\nflutter run --profile"
        }
      ]
    }
  }
}
