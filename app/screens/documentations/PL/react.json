{
  "languages": {
    "React": {
      "topics": [
        {
          "title": "Introduction to React",
          "level": "Beginner",
          "type": "Basics",
          "description": "React is a JavaScript library for building user interfaces. It allows developers to create large web applications that can update and render efficiently in response to data changes.",
          "example": "// Hello World in React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction App() {\n  return (\n    <h1>Hello, World!</h1>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"
        },
        {
          "title": "JSX Syntax",
          "level": "Beginner",
          "type": "Basics",
          "description": "JSX stands for JavaScript XML. It allows you to write HTML elements in JavaScript and place them in the DOM without using methods like `createElement` or `appendChild`.",
          "example": "// Using JSX\nconst element = <h1>Hello, JSX!</h1>;\nReactDOM.render(element, document.getElementById('root'));"
        },
        {
          "title": "Components",
          "level": "Beginner",
          "type": "Components",
          "description": "Components are the building blocks of a React application's UI. They can be either class-based or function-based.",
          "example": "// Functional Component\nfunction Greeting() {\n  return <h1>Hello, User!</h1>;\n}\n\n// Class Component\nclass Greeting extends React.Component {\n  render() {\n    return <h1>Hello, User!</h1>;\n  }\n}"
        },
        {
          "title": "Props",
          "level": "Beginner",
          "type": "Components",
          "description": "Props (short for 'properties') are read-only components which must be kept pureâ€”immutable. They are always passed down from the parent to the child components.",
          "example": "// Using props\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}!</h1>;\n}\n\n// Rendering the component\n<Welcome name=\"Alice\" />"
        },
        {
          "title": "State",
          "level": "Beginner",
          "type": "Components",
          "description": "State is similar to props, but it is private and fully controlled by the component. State allows components to create and manage their own data.",
          "example": "// Using state in a class component\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  increment = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  render() {\n    return (\n      <div>\n        <p>Count: {this.state.count}</p>\n        <button onClick={this.increment}>Increment</button>\n      </div>\n    );\n  }\n}"
        },
        {
          "title": "Event Handling",
          "level": "Beginner",
          "type": "Interaction",
          "description": "Handling events with React elements is very similar to handling events on DOM elements. However, there are some syntactic differences like using camelCase for event names.",
          "example": "// Event handling in React\nfunction ActionButton() {\n  function handleClick() {\n    alert('Button clicked!');\n  }\n\n  return (\n    <button onClick={handleClick}>Click Me</button>\n  );\n}"
        },
        {
          "title": "Conditional Rendering",
          "level": "Beginner",
          "type": "Rendering",
          "description": "Conditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like `if`, `&&`, and the ternary operator to render different outputs based on conditions.",
          "example": "// Conditional rendering example\nfunction UserGreeting(props) {\n  return <h1>Welcome back!</h1>;\n}\n\nfunction GuestGreeting(props) {\n  return <h1>Please sign up.</h1>;\n}\n\nfunction Greeting(props) {\n  const isLoggedIn = props.isLoggedIn;\n  if (isLoggedIn) {\n    return <UserGreeting />;\n  }\n  return <GuestGreeting />;\n}\n\n// Usage\n<Greeting isLoggedIn={true} />"
        },
        {
          "title": "Lists and Keys",
          "level": "Beginner",
          "type": "Rendering",
          "description": "Rendering lists in React involves using the `map()` function to iterate over an array and return React elements. Keys help React identify which items have changed, are added, or are removed.",
          "example": "// Rendering a list\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li key={number.toString()}>{number}</li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n\n// Usage\n<NumberList numbers={[1, 2, 3, 4, 5]} />"
        },
        {
          "title": "Forms",
          "level": "Beginner",
          "type": "Forms",
          "description": "Forms in React are similar to HTML forms, but you need to manage the form data within the component's state.",
          "example": "// Controlled component example\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}"
        },
        {
          "title": "Lifecycle Methods",
          "level": "Intermediate",
          "type": "Components",
          "description": "Lifecycle methods are special methods in React components that allow you to run code at particular times in the component's life.",
          "example": "// Lifecycle methods example\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}"
        },
        {
          "title": "React Hooks",
          "level": "Intermediate",
          "type": "Hooks",
          "description": "Hooks are functions that let you 'hook into' React state and lifecycle features from function components. The most common hooks are `useState` and `useEffect`.",
          "example": "// Using useState and useEffect\nimport React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}"
        },
        {
          "title": "Context API",
          "level": "Intermediate",
          "type": "State Management",
          "description": "The Context API allows you to pass data through the component tree without having to pass props down manually at every level.",
          "example": "// Context API example\nconst ThemeContext = React.createContext('light');\n\nfunction ThemedButton() {\n  return (\n    <ThemeContext.Consumer>\n      {theme => (\n        <button className={theme}>I am styled by theme context!</button>\n      )}\n    </ThemeContext.Consumer>\n  );\n}\n\n// Providing context\nfunction App() {\n  return (\n    <ThemeContext.Provider value=\"dark\">\n      <ThemedButton />\n    </ThemeContext.Provider>\n  );\n}"
        },
        {
          "title": "Higher-Order Components",
          "level": "Advanced",
          "type": "Components",
          "description": "A higher-order component (HOC) is a function that takes a component and returns a new component. They are used for code reuse, logic, and bootstrap abstraction.",
          "example": "// Higher-order component example\nfunction withLogging(WrappedComponent) {\n  return class extends React.Component {\n    componentDidMount() {\n      console.log('Component mounted');\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  };\n}\n\n// Usage\nconst EnhancedComponent = withLogging(MyComponent);"
        },
        {
          "title": "Render Props",
          "level": "Advanced",
          "type": "Components",
          "description": "A render prop is a function prop that a component uses to know what to render. It allows for code reuse between components.",
          "example": "// Render props example\nclass MouseTracker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.state = { x: 0, y: 0 };\n  }\n\n  handleMouseMove(event) {\n    this.setState({\n      x: event.clientX,\n      y: event.clientY\n    });\n  }\n\n  render() {\n    return (\n      <div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>\n        {this.props.render(this.state)}\n      </div>\n    );\n  }\n}\n\n// Usage\n<MouseTracker render={({ x, y }) => (\n  <h1>The mouse position is ({x}, {y})</h1>\n)} />"
        },
        {
          "title": "Portals",
          "level": "Advanced",
          "type": "Rendering",
          "description": "Portals provide a way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.",
          "example": "// Using portals\nReactDOM.createPortal(\n  this.props.children,\n  document.getElementById('modal-root')\n);"
        },
        {
          "title": "Error Boundaries",
          "level": "Advanced",
          "type": "Error Handling",
          "description": "Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI.",
          "example": "// Error boundary example\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    // Log error\n    console.error(error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\n// Usage\n<ErrorBoundary>\n  <MyComponent />\n</ErrorBoundary>"
        },
        {
          "title": "React Router",
          "level": "Intermediate",
          "type": "Routing",
          "description": "React Router is a standard library for routing in React. It enables navigation among views of various components in a React application.",
          "example": "// React Router example\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/about\">About</Link>\n        </nav>\n\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}"
        },
        {
          "title": "Redux",
          "level": "Advanced",
          "type": "State Management",
          "description": "Redux is a predictable state container for JavaScript apps, often used with React to manage application state.",
          "example": "// Simple Redux setup\nimport { createStore } from 'redux';\n\n// Reducer function\function counter(state = 0, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n    case 'DECREMENT':\n      return state - 1;\n    default:\n      return state;\n  }\n}\n\n// Create a Redux store\nconst store = createStore(counter);\n\n// Dispatch actions\nstore.dispatch({ type: 'INCREMENT' });\nconsole.log(store.getState()); // Output: 1"
        },
        {
          "title": "Performance Optimization",
          "level": "Advanced",
          "type": "Performance",
          "description": "React provides several techniques to optimize performance, such as using `React.memo`, code splitting, and avoiding unnecessary re-renders.",
          "example": "// Using React.memo\nconst MyComponent = React.memo(function MyComponent(props) {\n  /* render using props */\n});"
        },
        {
          "title": "Testing with Jest and React Testing Library",
          "level": "Intermediate",
          "type": "Testing",
          "description": "Testing components is essential for ensuring your application works as expected. Jest and React Testing Library are commonly used tools.",
          "example": "// Simple test example\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom/extend-expect';\nimport App from './App';\n\ntest('renders learn react link', () => {\n  render(<App />);\n  const linkElement = screen.getByText(/learn react/i);\n  expect(linkElement).toBeInTheDocument();\n});"
        },
        {
          "title": "Code Splitting",
          "level": "Advanced",
          "type": "Performance",
          "description": "Code splitting allows you to split your code into various bundles which can then be loaded on demand or in parallel.",
          "example": "// Code splitting with React.lazy\nimport React, { Suspense } from 'react';\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\n\nfunction App() {\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <OtherComponent />\n      </Suspense>\n    </div>\n  );\n}"
        },
        {
          "title": "Server-Side Rendering (SSR)",
          "level": "Advanced",
          "type": "Rendering",
          "description": "Server-side rendering is the ability to render your React components on the server and send the resulting HTML to the client.",
          "example": "// Simple SSR with Express\nimport express from 'express';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport App from './App';\n\nconst app = express();\n\napp.get('*', (req, res) => {\n  const html = ReactDOMServer.renderToString(<App />);\n  res.send(`\n    <!doctype html>\n    <div id=\"root\">${html}</div>\n    <script src=\"/bundle.js\"></script>\n  `);\n});\n\napp.listen(3000);"
        },
        {
          "title": "Custom Hooks",
          "level": "Advanced",
          "type": "Hooks",
          "description": "Custom hooks let you extract component logic into reusable functions.",
          "example": "// Custom hook example\nimport { useState, useEffect } from 'react';\n\nfunction useWindowWidth() {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return width;\n}\n\n// Usage\nfunction MyComponent() {\n  const width = useWindowWidth();\n  return <div>Window width: {width}</div>;\n}"
        },
        {
          "title": "Fragments",
          "level": "Intermediate",
          "type": "Components",
          "description": "Fragments let you group a list of children without adding extra nodes to the DOM.",
          "example": "// Using fragments\nfunction Table() {\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <Columns />\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nfunction Columns() {\n  return (\n    <>\n      <td>Hello</td>\n      <td>World</td>\n    </>\n  );\n}"
        },
        {
          "title": "Refs and the DOM",
          "level": "Intermediate",
          "type": "Interaction",
          "description": "Refs provide a way to access DOM nodes or React elements created in the render method.",
          "example": "// Using refs\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.myRef.current.focus();\n  }\n\n  render() {\n    return <input type=\"text\" ref={this.myRef} />;\n  }\n}"
        },
        {
          "title": "Controlled vs Uncontrolled Components",
          "level": "Intermediate",
          "type": "Forms",
          "description": "Controlled components have their state controlled by React, while uncontrolled components store their own state internally.",
          "example": "// Uncontrolled component\nfunction FileInput() {\n  const fileInputRef = React.createRef();\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    alert(`Selected file - ${fileInputRef.current.files[0].name}`);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"file\" ref={fileInputRef} />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}"
        },
        {
          "title": "PropTypes and Type Checking",
          "level": "Intermediate",
          "type": "Best Practices",
          "description": "PropTypes allow you to specify the types of props that a component should receive, helping catch bugs.",
          "example": "// Using PropTypes\nimport PropTypes from 'prop-types';\n\nfunction Greeting(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nGreeting.propTypes = {\n  name: PropTypes.string.isRequired\n};"
        },
        {
          "title": "React.memo and Pure Components",
          "level": "Advanced",
          "type": "Performance",
          "description": "`React.memo` and `PureComponent` are used to optimize performance by preventing unnecessary re-renders.",
          "example": "// Using React.memo\nconst MyComponent = React.memo(function MyComponent(props) {\n  /* render using props */\n});\n\n// Using PureComponent\nclass MyComponent extends React.PureComponent {\n  render() {\n    /* render using this.props */\n  }\n}"
        },
        {
          "title": "Suspense and Lazy Loading",
          "level": "Advanced",
          "type": "Performance",
          "description": "Suspense allows you to defer rendering part of your component tree until some condition is met, and `React.lazy` enables lazy loading of components.",
          "example": "// Using Suspense and lazy\nimport React, { Suspense } from 'react';\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\n\nfunction MyComponent() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <OtherComponent />\n    </Suspense>\n  );\n}"
        },
        {
          "title": "Prop Drilling and Context API",
          "level": "Intermediate",
          "type": "State Management",
          "description": "Prop drilling refers to the process of passing down props from parent to child components. Context API can help avoid prop drilling by providing a way to share values between components without passing props.",
          "example": "// Avoiding prop drilling with Context\nconst UserContext = React.createContext();\n\nfunction App() {\n  const user = { name: 'Alice' };\n  return (\n    <UserContext.Provider value={user}>\n      <Toolbar />\n    </UserContext.Provider>\n  );\n}\n\nfunction Toolbar() {\n  return (\n    <div>\n      <ThemedButton />\n    </div>\n  );\n}\n\nfunction ThemedButton() {\n  const user = React.useContext(UserContext);\n  return <button>{user.name}'s Button</button>;\n}"
        },
        {
          "title": "React and TypeScript",
          "level": "Intermediate",
          "type": "Best Practices",
          "description": "TypeScript can be used with React to add static typing, which helps in catching errors early and improving code quality.",
          "example": "// Functional component with TypeScript\nimport React from 'react';\n\ntype GreetingProps = {\n  name: string;\n};\n\nconst Greeting: React.FC<GreetingProps> = ({ name }) => {\n  return <h1>Hello, {name}!</h1>;\n};"
        },
        {
          "title": "React Native Basics",
          "level": "Intermediate",
          "type": "Mobile Development",
          "description": "React Native allows you to use React to build native mobile apps for iOS and Android.",
          "example": "// Simple React Native component\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Hello, React Native!</Text>\n    </View>\n  );\n}"
        },
        {
          "title": "Using Webpack with React",
          "level": "Advanced",
          "type": "Build Tools",
          "description": "Webpack is a module bundler that can be configured to bundle React applications, manage assets, and optimize builds.",
          "example": "// Basic webpack.config.js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.jsx?$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n        },\n      },\n    ],\n  },\n  resolve: {\n    extensions: ['.js', '.jsx'],\n  },\n};"
        },
        {
          "title": "Concurrent Mode and Suspense for Data Fetching",
          "level": "Advanced",
          "type": "Performance",
          "description": "Concurrent Mode is an experimental set of features that make React apps more responsive by rendering component trees without blocking the main thread.",
          "example": "// Note: As of now, Concurrent Mode is experimental and APIs may change.\n// Using Suspense for data fetching\nconst resource = fetchData();\n\nfunction MyComponent() {\n  const data = resource.read();\n  return <div>{data}</div>;\n}\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <MyComponent />\n    </Suspense>\n  );\n}"
        },
        {
          "title": "React DevTools",
          "level": "Beginner",
          "type": "Tools",
          "description": "React DevTools is a browser extension that allows you to inspect the React component hierarchy in the browser's developer tools.",
          "example": "// Installing React DevTools\n// Available for Chrome and Firefox from their respective extension stores.\n// Once installed, you can inspect React components in the 'Components' tab."
        },
        {
          "title": "Immutable Data Structures",
          "level": "Advanced",
          "type": "Best Practices",
          "description": "Using immutable data structures can help prevent unintended side effects and make your React applications more predictable.",
          "example": "// Using Immutable.js\nimport { Map } from 'immutable';\n\nlet map1 = Map({ a: 1, b: 2, c: 3 });\nlet map2 = map1.set('b', 50);\n\nconsole.log(map1.get('b')); // 2\nconsole.log(map2.get('b')); // 50"
        },
        {
          "title": "Styled Components",
          "level": "Intermediate",
          "type": "Styling",
          "description": "Styled Components is a library for React and React Native that allows you to use component-level styles in your application.",
          "example": "// Using styled-components\nimport styled from 'styled-components';\n\nconst Button = styled.button`\n  background: palevioletred;\n  color: white;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\nfunction App() {\n  return <Button>Click Me</Button>;\n}"
        },
        {
          "title": "Using Axios for HTTP Requests",
          "level": "Intermediate",
          "type": "Networking",
          "description": "Axios is a popular library for making HTTP requests from React applications.",
          "example": "// Using Axios\nimport axios from 'axios';\n\nfunction fetchData() {\n  axios.get('https://api.example.com/data')\n    .then(response => {\n      console.log(response.data);\n    })\n    .catch(error => {\n      console.error('Error fetching data:', error);\n    });\n}"
        },
        {
          "title": "React Helmet for Managing Document Head",
          "level": "Intermediate",
          "type": "SEO",
          "description": "React Helmet is a component that lets you control your document head using their React component.",
          "example": "// Using React Helmet\nimport { Helmet } from 'react-helmet';\n\nfunction HomePage() {\n  return (\n    <div>\n      <Helmet>\n        <title>Home Page</title>\n        <meta name=\"description\" content=\"This is the home page\" />\n      </Helmet>\n      <h1>Welcome to the Home Page</h1>\n    </div>\n  );\n}"
        },
        {
          "title": "React Profiler",
          "level": "Advanced",
          "type": "Performance",
          "description": "The Profiler API helps you measure the rendering performance of React components.",
          "example": "// Using React Profiler\nimport { Profiler } from 'react';\n\nfunction onRenderCallback(\n  id, // the 'id' prop of the Profiler tree that has just committed\n  phase, // either 'mount' (if the tree just mounted) or 'update'\n  actualDuration, // time spent rendering the committed update\n  baseDuration, // estimated time to render the entire subtree without memoization\n  startTime, // when React began rendering this update\n  commitTime, // when React committed this update\n  interactions // the Set of interactions belonging to this update\n) {\n  // Aggregate or log render timings...\n}\n\nfunction App() {\n  return (\n    <Profiler id=\"App\" onRender={onRenderCallback}>\n      <MyComponent />\n    </Profiler>\n  );\n}"
        },
        {
          "title": "Internationalization with React Intl",
          "level": "Intermediate",
          "type": "Internationalization",
          "description": "React Intl is a library that helps you internationalize your React applications.",
          "example": "// Using React Intl\nimport { IntlProvider, FormattedMessage } from 'react-intl';\n\nconst messages = {\n  en: { greeting: 'Hello, {name}!' },\n  es: { greeting: 'Â¡Hola, {name}!' },\n};\n\nfunction App() {\n  const locale = 'en';\n  return (\n    <IntlProvider locale={locale} messages={messages[locale]}>\n      <FormattedMessage id=\"greeting\" values={{ name: 'Alice' }} />\n    </IntlProvider>\n  );\n}"
        }
      ]
    }
  }
}
