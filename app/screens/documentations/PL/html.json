{
  "languages": {
    "HTML": {
      "topics": [
        {
          "title": "Introduction to HTML",
          "level": "Beginner",
          "type": "Basics",
          "description": "HTML (HyperText Markup Language) is the standard markup language used to create web pages. It describes the structure of web content using a series of elements represented by tags.",
          "example": "<!-- A basic HTML document -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>My First Web Page</title>\n</head>\n<body>\n    <h1>Hello, World!</h1>\n</body>\n</html>"
        },
        {
          "title": "HTML Elements and Tags",
          "level": "Beginner",
          "type": "Basics",
          "description": "HTML elements are the building blocks of HTML pages. They are represented by tags, which usually come in pairs: an opening tag and a closing tag.",
          "example": "<!-- Common HTML elements -->\n<p>This is a paragraph.</p>\n<a href=\"https://www.example.com\">This is a link.</a>\n<img src=\"image.jpg\" alt=\"An image\">"
        },
        {
          "title": "Headings",
          "level": "Beginner",
          "type": "Text Formatting",
          "description": "Headings are used to define the titles and subtitles in your content. HTML provides six levels of headings, from `<h1>` to `<h6>`, with `<h1>` being the most important.",
          "example": "<h1>Main Heading</h1>\n<h2>Subheading</h2>\n<h3>Sub-subheading</h3>"
        },
        {
          "title": "Paragraphs and Line Breaks",
          "level": "Beginner",
          "type": "Text Formatting",
          "description": "Paragraphs are defined using the `<p>` tag. Line breaks can be inserted using the `<br>` tag.",
          "example": "<p>This is a paragraph.</p>\n<p>This is another paragraph.</p>\n\n<p>This is a line of text.<br>This is another line.</p>"
        },
        {
          "title": "Text Formatting Tags",
          "level": "Beginner",
          "type": "Text Formatting",
          "description": "HTML provides tags to format text, such as `<b>` for bold, `<i>` for italic, `<u>` for underline, and more.",
          "example": "<p>This is <b>bold</b> text.</p>\n<p>This is <i>italic</i> text.</p>\n<p>This is <u>underlined</u> text.</p>"
        },
        {
          "title": "Lists",
          "level": "Beginner",
          "type": "Lists",
          "description": "HTML supports ordered lists (`<ol>`), unordered lists (`<ul>`), and definition lists (`<dl>`) to display items in a list format.",
          "example": "<!-- Unordered List -->\n<ul>\n    <li>Apple</li>\n    <li>Banana</li>\n    <li>Cherry</li>\n</ul>\n\n<!-- Ordered List -->\n<ol>\n    <li>First item</li>\n    <li>Second item</li>\n    <li>Third item</li>\n</ol>"
        },
        {
          "title": "Links",
          "level": "Beginner",
          "type": "Hyperlinks",
          "description": "Links are created using the `<a>` tag and are used to link to other pages or resources.",
          "example": "<a href=\"https://www.example.com\">Visit Example.com</a>\n<a href=\"page.html\">Go to another page</a>"
        },
        {
          "title": "Images",
          "level": "Beginner",
          "type": "Media",
          "description": "Images can be embedded using the `<img>` tag. The `src` attribute specifies the path to the image, and the `alt` attribute provides alternative text.",
          "example": "<img src=\"image.jpg\" alt=\"Description of the image\">\n<img src=\"https://www.example.com/image.png\" alt=\"An external image\">"
        },
        {
          "title": "Tables",
          "level": "Beginner",
          "type": "Tables",
          "description": "Tables are used to display data in a tabular format. The main tags used are `<table>`, `<tr>` (table row), `<th>` (table header), and `<td>` (table data).",
          "example": "<table>\n    <tr>\n        <th>Name</th>\n        <th>Age</th>\n    </tr>\n    <tr>\n        <td>Alice</td>\n        <td>30</td>\n    </tr>\n    <tr>\n        <td>Bob</td>\n        <td>25</td>\n    </tr>\n</table>"
        },
        {
          "title": "Forms",
          "level": "Beginner",
          "type": "Forms",
          "description": "Forms allow users to submit data to a server. They are created using the `<form>` tag and include form elements like input fields, checkboxes, radio buttons, and submit buttons.",
          "example": "<form action=\"submit_form.php\" method=\"post\">\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n    <input type=\"submit\" value=\"Submit\">\n</form>"
        },
        {
          "title": "Form Elements",
          "level": "Beginner",
          "type": "Forms",
          "description": "HTML provides various form elements such as text fields, password fields, checkboxes, radio buttons, and select boxes.",
          "example": "<!-- Text Input -->\n<input type=\"text\" name=\"username\">\n\n<!-- Password Input -->\n<input type=\"password\" name=\"password\">\n\n<!-- Checkbox -->\n<input type=\"checkbox\" name=\"subscribe\" value=\"newsletter\"> Subscribe to newsletter\n\n<!-- Radio Buttons -->\n<input type=\"radio\" name=\"gender\" value=\"male\"> Male\n<input type=\"radio\" name=\"gender\" value=\"female\"> Female\n\n<!-- Select Box -->\n<select name=\"country\">\n    <option value=\"usa\">USA</option>\n    <option value=\"canada\">Canada</option>\n    <option value=\"uk\">UK</option>\n</select>"
        },
        {
          "title": "Semantic Elements",
          "level": "Intermediate",
          "type": "Structure",
          "description": "Semantic elements clearly describe their meaning to both the browser and the developer. Examples include `<header>`, `<footer>`, `<article>`, `<section>`, and `<nav>`.",
          "example": "<header>\n    <h1>Website Title</h1>\n</header>\n\n<nav>\n    <ul>\n        <li><a href=\"#\">Home</a></li>\n        <li><a href=\"#\">About</a></li>\n        <li><a href=\"#\">Contact</a></li>\n    </ul>\n</nav>\n\n<section>\n    <h2>Section Title</h2>\n    <p>Some content here.</p>\n</section>\n\n<footer>\n    <p>&copy; 2023 My Website</p>\n</footer>"
        },
        {
          "title": "Inline vs Block Elements",
          "level": "Intermediate",
          "type": "Basics",
          "description": "HTML elements are either inline or block-level. Block-level elements start on a new line and take up the full width available. Inline elements do not start on a new line and only take up as much width as necessary.",
          "example": "<!-- Block-level element -->\n<div>This is a block element.</div>\n\n<!-- Inline elements inside a block element -->\n<p>This is a paragraph with <span>inline</span> elements.</p>"
        },
        {
          "title": "IFrames",
          "level": "Intermediate",
          "type": "Media",
          "description": "The `<iframe>` tag specifies an inline frame that is used to embed another document within the current HTML document.",
          "example": "<iframe src=\"https://www.example.com\" width=\"600\" height=\"400\" title=\"Example Site\"></iframe>"
        },
        {
          "title": "Meta Tags",
          "level": "Intermediate",
          "type": "Head Elements",
          "description": "Meta tags provide metadata about the HTML document. They are placed inside the `<head>` tag and are not displayed on the page but can affect how it is indexed by search engines.",
          "example": "<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"description\" content=\"Free Web tutorials\">\n    <meta name=\"keywords\" content=\"HTML,CSS,JavaScript\">\n    <meta name=\"author\" content=\"John Doe\">\n    <title>My Web Page</title>\n</head>"
        },
        {
          "title": "Audio and Video",
          "level": "Intermediate",
          "type": "Media",
          "description": "HTML5 introduced the `<audio>` and `<video>` tags for embedding media content.",
          "example": "<!-- Audio -->\n<audio controls>\n    <source src=\"audiofile.mp3\" type=\"audio/mpeg\">\n    Your browser does not support the audio element.\n</audio>\n\n<!-- Video -->\n<video width=\"320\" height=\"240\" controls>\n    <source src=\"videofile.mp4\" type=\"video/mp4\">\n    Your browser does not support the video tag.\n</video>"
        },
        {
          "title": "Canvas",
          "level": "Intermediate",
          "type": "Graphics",
          "description": "The `<canvas>` element is used to draw graphics on a web page via scripting (usually JavaScript).",
          "example": "<canvas id=\"myCanvas\" width=\"200\" height=\"100\" style=\"border:1px solid #000000;\"></canvas>\n\n<script>\nvar c = document.getElementById(\"myCanvas\");\nvar ctx = c.getContext(\"2d\");\nctx.fillStyle = \"#FF0000\";\nctx.fillRect(0, 0, 150, 75);\n</script>"
        },
        {
          "title": "SVG",
          "level": "Intermediate",
          "type": "Graphics",
          "description": "SVG (Scalable Vector Graphics) is used to define vector-based graphics for the web that can be scaled to any size without losing quality.",
          "example": "<svg width=\"100\" height=\"100\">\n    <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"green\" stroke-width=\"4\" fill=\"yellow\" />\n</svg>"
        },
        {
          "title": "HTML Entities",
          "level": "Intermediate",
          "type": "Basics",
          "description": "HTML entities are used to display reserved characters in HTML, such as `<`, `>`, `&`, etc., or to display characters that are not on the keyboard.",
          "example": "Displaying special characters:\n<p>Less than: &lt;</p>\n<p>Greater than: &gt;</p>\n<p>Ampersand: &amp;</p>\n<p>Registered trademark symbol: &reg;</p>"
        },
        {
          "title": "Character Encoding",
          "level": "Intermediate",
          "type": "Head Elements",
          "description": "Character encoding specifies how the characters in the HTML document should be interpreted. UTF-8 is the most commonly used encoding.",
          "example": "<head>\n    <meta charset=\"UTF-8\">\n    <title>Character Encoding Example</title>\n</head>"
        },
        {
          "title": "Forms Validation",
          "level": "Intermediate",
          "type": "Forms",
          "description": "HTML5 introduces form validation features to validate user input without the need for JavaScript.",
          "example": "<form action=\"/submit_form\" method=\"post\">\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required><br><br>\n    <label for=\"age\">Age (between 18 and 99):</label>\n    <input type=\"number\" id=\"age\" name=\"age\" min=\"18\" max=\"99\"><br><br>\n    <input type=\"submit\" value=\"Submit\">\n</form>"
        },
        {
          "title": "Data Attributes",
          "level": "Intermediate",
          "type": "Attributes",
          "description": "Data attributes allow you to store extra information on HTML elements using attributes that start with 'data-'.",
          "example": "<div id=\"product1\" data-name=\"Laptop\" data-price=\"999\">\n    <h2>Product 1</h2>\n</div>\n\n<script>\nvar product = document.getElementById('product1');\nvar name = product.dataset.name;\nvar price = product.dataset.price;\nconsole.log('Product:', name, 'Price:', price);\n</script>"
        },
        {
          "title": "HTML5 Web Storage",
          "level": "Advanced",
          "type": "APIs",
          "description": "Web Storage provides a way to store data locally in the user's browser. It includes two mechanisms: localStorage and sessionStorage.",
          "example": "<script>\n// Store data\nlocalStorage.setItem('username', 'Alice');\n\n// Retrieve data\nvar user = localStorage.getItem('username');\nconsole.log('User:', user);\n</script>"
        },
        {
          "title": "HTML5 Geolocation",
          "level": "Advanced",
          "type": "APIs",
          "description": "The Geolocation API allows the user's location to be retrieved in the browser.",
          "example": "<button onclick=\"getLocation()\">Get My Location</button>\n<p id=\"location\"></p>\n\n<script>\nfunction getLocation() {\n    if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(showPosition);\n    } else {\n        document.getElementById('location').innerHTML = \"Geolocation is not supported by this browser.\";\n    }\n}\nfunction showPosition(position) {\n    document.getElementById('location').innerHTML =\n    \"Latitude: \" + position.coords.latitude +\n    \"<br>Longitude: \" + position.coords.longitude;\n}\n</script>"
        },
        {
          "title": "Drag and Drop",
          "level": "Advanced",
          "type": "APIs",
          "description": "HTML5 Drag and Drop API allows users to drag and drop elements within the browser.",
          "example": "<p>Drag the image into the rectangle:</p>\n\n<div id=\"div1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\" style=\"width:200px;height:100px;padding:10px;border:1px solid #aaaaaa;\"></div>\n\n<img id=\"drag1\" src=\"img_logo.png\" draggable=\"true\" ondragstart=\"drag(event)\" width=\"88\" height=\"31\">\n\n<script>\nfunction allowDrop(ev) {\n    ev.preventDefault();\n}\nfunction drag(ev) {\n    ev.dataTransfer.setData(\"text\", ev.target.id);\n}\nfunction drop(ev) {\n    ev.preventDefault();\n    var data = ev.dataTransfer.getData(\"text\");\n    ev.target.appendChild(document.getElementById(data));\n}\n</script>"
        },
        {
          "title": "Responsive Design with Meta Viewport",
          "level": "Advanced",
          "type": "Responsive Design",
          "description": "The meta viewport tag allows you to control the viewport's size and scale, which is essential for responsive web design.",
          "example": "<head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Responsive Page</title>\n</head>"
        },
        {
          "title": "Responsive Images",
          "level": "Advanced",
          "type": "Media",
          "description": "HTML provides the `<picture>` element and `srcset` attribute to serve different images based on device capabilities.",
          "example": "<!-- Using srcset -->\n<img src=\"small.jpg\" srcset=\"medium.jpg 600w, large.jpg 1200w\" alt=\"Responsive Image\">\n\n<!-- Using picture element -->\n<picture>\n    <source media=\"(min-width: 650px)\" srcset=\"large.jpg\">\n    <source media=\"(min-width: 465px)\" srcset=\"medium.jpg\">\n    <img src=\"small.jpg\" alt=\"Responsive Image\">\n</picture>"
        },
        {
          "title": "Accessibility Features",
          "level": "Advanced",
          "type": "Accessibility",
          "description": "Creating accessible web content involves using semantic HTML, ARIA roles, and other attributes to make web pages usable by people with disabilities.",
          "example": "<!-- Using ARIA roles and labels -->\n<button aria-label=\"Close\" role=\"button\">X</button>\n\n<!-- Providing alt text for images -->\n<img src=\"chart.png\" alt=\"Sales data chart for 2023\">\n\n<!-- Using semantic elements -->\n<nav aria-label=\"Main Navigation\">\n    <!-- Navigation links -->\n</nav>"
        },
        {
          "title": "Microdata and Structured Data",
          "level": "Advanced",
          "type": "SEO",
          "description": "Microdata provides a way to embed machine-readable data in HTML documents using the `itemscope`, `itemtype`, and `itemprop` attributes.",
          "example": "<div itemscope itemtype=\"http://schema.org/Person\">\n    <span itemprop=\"name\">John Doe</span>\n    <img src=\"johndoe.jpg\" alt=\"Photo of John Doe\" itemprop=\"image\">\n    <span itemprop=\"jobTitle\">Software Engineer</span>\n    <span itemprop=\"telephone\">(123) 456-7890</span>\n</div>"
        },
        {
          "title": "HTML Templates",
          "level": "Advanced",
          "type": "Templates",
          "description": "The `<template>` element is used to declare fragments of HTML that can be cloned and inserted in the document by JavaScript.",
          "example": "<template id=\"myTemplate\">\n    <div class=\"product\">\n        <h2></h2>\n        <p></p>\n    </div>\n</template>\n\n<script>\nvar template = document.getElementById('myTemplate');\nvar clone = template.content.cloneNode(true);\nclone.querySelector('h2').textContent = 'Product Name';\nclone.querySelector('p').textContent = 'Product Description';\ndocument.body.appendChild(clone);\n</script>"
        },
        {
          "title": "Content Editable",
          "level": "Intermediate",
          "type": "Basics",
          "description": "The `contenteditable` attribute specifies whether the content of an element is editable or not.",
          "example": "<p contenteditable=\"true\">This is an editable paragraph. Click here to edit the text.</p>"
        },
        {
          "title": "Web Components",
          "level": "Advanced",
          "type": "Components",
          "description": "Web Components allow you to create custom, reusable HTML tags to use in web pages and web apps.",
          "example": "<!-- Defining a custom element -->\n<script>\nclass HelloWorld extends HTMLElement {\n    constructor() {\n        super();\n        this.attachShadow({ mode: 'open' });\n        this.shadowRoot.innerHTML = `<p>Hello, World!</p>`;\n    }\n}\ncustomElements.define('hello-world', HelloWorld);\n</script>\n\n<!-- Using the custom element -->\n<hello-world></hello-world>"
        },
        {
          "title": "Progressive Enhancement",
          "level": "Advanced",
          "type": "Best Practices",
          "description": "Progressive enhancement is a strategy for web design that emphasizes core webpage content first, ensuring that basic content and functionality is accessible to all users.",
          "example": "<!-- Basic HTML structure -->\n<button id=\"submitBtn\">Submit</button>\n\n<!-- Enhancements using JavaScript -->\n<script>\ndocument.getElementById('submitBtn').addEventListener('click', function() {\n    // Enhanced functionality\n    alert('Form submitted!');\n});\n</script>"
        }
      ]
    }
  }
}
